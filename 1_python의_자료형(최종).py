# -*- coding: utf-8 -*-
"""1_python의 자료형(최종).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15y-7el_-S5JUU7v9-QdxffRQHiRQOPJg

파이썬에서 프로그래밍을 할때 가장 많이 사용하는 메소드중 하나가 print()일 것이다.<br> print를 다양하게 사용할 수 있지만, 앞으로 자주 사용하는 형태 몇가지를 살펴보자.

# **colab은 클라우드 버전의 주피터노트북이다.**

## 1. 출력

Jupyter notebook환경에서는 셀의 마지막 줄에 변수명을 올려 놓으면, <br> 그 내용은 print()메소드를 사용하지 않아도 출력해준다.
"""

a=10

print(a)
a

"""그러나 다음과 같이 하나의 셀에 여러 개를 출력할 경우에는 print()메소드를 이용하면 된다.

```
#문자열의 출력
print('안녕하세요')
print('Hello')
```
"""

#문자열의 출력
print('안녕하세요')
print("안녕하세요")
print('"안녕하세요"')
print("'안녕하세요'")
print('Hello')

myString = "This is"

print(myString)


## 타입 확인
print(type(myString))
type(myString)

#숫자의 출력
print(12345678)

#문자열의 출력
print("12345678")

"""## 2. 변수와 대입

변수는 **데이터를 담는 그릇**으로 이해하자.

변수라는 그릇에 정수 또는 문장, file을 담을 수 있는데, <br>이들을 구별하기 위해 변수들에 이름을 부여해야한다.

### 2-1. 변수의 이름

case 1. 알파벳 대소문자와 한글도 가능하다.<br> (한글은 가능하지만 한영변환을 자주해야해서 불편하다.)
"""

a = 1

A = 1

변수 = 1

변수

"""case 2. 알파벳 + 숫자 (가능)"""

a1 = 1

"""case 3. 알파벳 + 언더바(_) (가능)"""

a_ = 1

"""case 4. 언더바(_) + 알파벳 (가능))"""

_a = 1

"""case 5. 숫자 + 알파벳 (불가능)"""

1a = 1

## 한칸 뒤를 가르키면서 에러를 가르킨다.

"""case 6. 특수문자 (불가능)"""

* = 7

"""case 7. 언더바를 제외한 특수문자 (불가능)"""

a$ = 6

"""case 8. 변수의 이름 사이의 공백 (불가능)"""

a b = 6

"""주로 변수는 **소문자 알파벳으로 생성**하고, 필요시 **언더바**나 **숫자를 붙히는 방식**이 일반적이다."""

test = 10

test01 = 20

test_01 = 30

"""**낙타등 표기법(CamelCase)**으로 변수명을 표현하는 것도 좋다

변수명 표기법 참고 :
https://blog.naver.com/nkind/222017581135
"""

myData = 30

"""### 2-2. 변수의 출력

1. print() 구문 사이에 **값을 직접 집어 넣으면**, 바로 **값이 출력**된다.
2. print() 구문 사이에 **변수 이름**을 집어 넣으면, 그 **값이 출력**이 됩니다.
"""

# 값을 바로 집어 넣은 경우
print('test')

a = 123
b = 4
result = a+b


print(result)
result

print(a)

a = '안녕하세요, 반갑습니다'

print(a)

"""# 파이썬의 자료형

파이썬은 자료형으로 숫자, 문자, 리스트, 튜플, 딕셔너리, 집합, 불(bool)의 형태를 가지고 있다.

이 파일에서는 아래의 순서로 진행한다.
1. 숫자 (integer(int), float)<br>
2. 문자 (String)<br>
3. 리스트(List) <br>
4. 튜플(Tuple) <br>
5. 딕셔너리(Dictionary) <br>
6. 집합(set) <br>
7. 불(Bool) <br>

## 3. 데이터 타입

**데이터 type**

1. int(정수)
2. float(실수)
3. str(문자열)
4. bool(참/거짓)

### 3-1. int(정수)
"""

a = 1

type(a)

if 1:
    print('1은 참으로 취급')
else:
    print('1은 거짓부렁이')

if 0:
    print('0은 참으로 취급')
else:
    print('0은 거짓부렁이')

if 123:
    print('123은 참으로 취급')
else:
    print('123은 거짓부렁이')

"""### 3-2. float(실수)"""

a = 3.14

type(a)

print(a)

"""### 3-3. str 혹은 object (문자)"""

word = '안녕하세요'

word = "안녕하세요"

type(word)

word = "안녕하세요"

type(word)

"""### 3-4. bool (참/거짓)"""

a = False

print(a)

0 == False

"""### 3-5 아무것도 아닌 None 타입도 있습니다.

말 그래도 아무 것도 아닌 흔히 Null 값을 넣는다고도 합니다.

사전상 의미는<br>
* **Null: Nullify (무효화하다)**
라는 뜻을 가지고 있다네요~

python에서는 **None** 입니다!
"""

a = None

type(a)

print(a)

"""## 4. 데이터 타입 (집합)

**집합 형태의 데이터 타입**

1. list (순서 O, 집합)
2. tuple (순서 O, 읽기 전용 집합)
3. set (순서 X, 중복X 집합)
4. dict (key, value로 이루어진 사전형 집합)

### 4-1. list (순서가 있는 집합)

[] 형태로 표현합니다.
"""

mylist = []

mylist

type(mylist)

mylist = [1, 3, 2, 4, 5]

mylist

"""#### 리스트에 추가하기"""

mylist = []

print(type(mylist))

# 비어있는 리스트 확인
print(mylist)

# mylist를 append함수의 입력으로 받아 리스트에 1을 추가. append는 맨 뒤에 데이터를 추가한다.
mylist.append(1)

mylist

mylist.append(2)
mylist.append(3)

mylist
print(mylist)
mylist.reverse()

mylist

"""### myList => "어벤져스", "마이너리티 리포트", "배트맨", "슈퍼맨"
"""

# 초기화시에 리스트에 입력
myList = ["어벤져스", "마이너리티 리포트", "배트맨", "슈퍼맨"]
myList

#사용자 및 키보드로부터 입력을 받아서 변수에 전달하는 함수
a = input()

a

# input()함수는 키보드로 부터 입력
data = input()
print('영화제목 : ' + data)

type(data)

myList =[]
data = input()
myList.append(data)
data = input()
myList.append(data)
myList

# insert함수는 내가 위치를 지정할때 사용하는 함수
myList = [1,3,4]
myList.insert(1,2)
myList

"""#### 리스트에서 제거하기"""

mylist.append(2)
mylist

mylist.remove(2)
#같은 값이 있다면 앞에 값부터 지워진다.

mylist

mylist.remove(1)

"""### pop()은 리스트의 맨 마지막 요소를 리턴하고 그 요소는 삭제한다."""

myList = [1,2,3,4,5]
returnValue1 = myList.pop()
print(returnValue1)
print(myList)
returnValue2 = myList.pop()
print(returnValue2)
print(myList)

#리스트에서 마지막 요소를 가져와서 버린다.
myList.pop()
myList

"""#### 여러 값들이 포함되어 있을 때 제거 순서"""

mylist = []
mylist.append(1)
mylist.append(2)
mylist.append(3)
mylist.append(1)
mylist.append(2)
mylist.append(3)

mylist

mylist.remove(1)

mylist

mylist.remove(1)

mylist

mylist.remove(1)

"""#### 인덱싱(indexing) -> 색인"""

mylist = [1, 2, 3, 4]

"""인덱스는 **0번 부터 시작** 합니다."""

mylist[0]

mylist[3]

mylist[4]

mylist = [1, 2, 3, 4]

mylist[-2]

# -는 뒤에서
mylist[-5]

"""#### 인덱스로 접근하여 값 바꾸기"""

mylist

mylist[0]

# 0번 인덱스의 데이터를 100으로 덮어쓰기
mylist[0] = 100

mylist

"""#### 전체 길이 (사이즈) 알아내기"""

len(mylist)

a = [1,2,3]

#리스트에서 하나씩 꺼내서 i변수에 전달하고, 하나씩 출력한다.
for i in a :
  print("제 순서는 : ",i)
  print("저보다 더 큰 수는 : ", i + 1)

#1~10까지 값을 넣어주고.그 값을 for 문으로 출력

result = []

startValue = 0
stopValue = 10

for i in range(startValue,stopValue):
 result.append(1+i)
 print(result[i])

#리스트 컴프리핸션으로 작성
[i+1 for i in range(10)]

# 잠깐 for문 미리 활용해서 코딩
# 시작값이 1이고, 종료조건이 10미만이고, 증가분이 1씩 증가
myList = []

for i in range(1,100):
    myList.append(i)

print(myList)
len(myList)

"""##파일 4개 생성, 파일의 목록을 리스트에 받아옴"""

#ls 명령은 리눅스 명령어, ls(list)
!ls
!pwd

# 리눅스 명령어인 touch를 이용해서 내용이 아무것도 없는 a.txt파일을 만듭니다.
!touch a.txt b.txt c.txt d.txt

# 현재 폴더에 빈파일들을 4개 만들기

# colab이 실행되는 서버의 os가 linux
# '!'는 터미널 명령 ls(list)
!ls

import os
# 현재 작업 디렉토리의 파일 목록들을 가져옴
print(os.getcwd()) #현재 경로알려줘
filenames = os.listdir()
filenames

removeList1 = filenames[0]
removeList2 = filenames[5]

# filenames라는 리스트에서 '.config'와 'sample_data'를 삭제하고 txt파일만 남길때
filenames.remove(removeList1)
filenames.remove(removeList2)
filenames

#내가 찾고자하는 파일을 골라서 리스트로 만들때 유용

import glob


dirPath = '/content/newFolder/*.txt'

glob.glob(dirPath)
# glob.glob('*.txt')

"""##활용 :  리스트 활용해서 폴더의 파일명을 읽어오는 코드

### 4-2. tuple (순서가 있는 집합, 읽기 전용)

() 로 표현합니다
"""

myTuple = (1, 2, 3, 4, 5)

myTuple.append(1)

myTuple.remove(1)

myTuple[0] = 1

"""#### 길이 파악하기"""

#튜플은 길이 카운팅 가능
len(myTuple)

myTuple

"""## set (순서 X, 중복 X)"""

myset = set()

myset

type(myset)

myset.add(1)
myset.add(2)
myset.add(3)

myset

myset.add(1)
myset.add(2)
myset.add(3)
myset.add(1)
myset.add(2)
myset.add(3)
#집합 타입은 중복 추가 안됨
#동시에 여러개 추가하고싶을 때는 update

myset

myset.add(4)

myset

len(myset)

"""### 4-3. dict (사전형 집합, key와 value 쌍)

{}로 표현합니다
"""

mydict = dict()

mydict

type(mydict)

"""#### 값을 추가하기"""

mydict = dict()

# key값이 'apple', value가 123456
mydict['apple'] = 123456

mydict['apple']

mydict[0] = 2

mydict[0]

mydict

"""mydict의 키는 **문자형** / **숫자형**이 혼용 가능합니다"""

mydict

"""float(실수)도 키로써 입력이 가능합니다."""

mydict[3.14] = 1

mydict

"""#### 값을 바꾸기"""

mydict['apple'] = 'byebye'

mydict

"""#### 길이 파악하기"""

len(mydict)

"""## 주사위를 원하는 횟수만큼 던지고 그 결과값을 리스트로 저장"""

import random

myList =[]

#1. 키보드로부터 반복 횟수를 입력 받는다.
count = input() #input()은 str이므로 int형 변환

#2.타입을 확인한다.(str)
print(type(count))

#3.타입을 str -> int로 변경한다.
count = int(input())

#4. 반복 횟수만큼 난수(1~6사이의)를 생성해서 리스트엥 추가한다.
for i in range(count):
  num = random.randrange(1,7)
  myList.append(num)

print(myList)

